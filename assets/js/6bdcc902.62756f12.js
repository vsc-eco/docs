"use strict";(self.webpackChunkvsc_docu=self.webpackChunkvsc_docu||[]).push([[6147],{4579:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var i=t(5893),o=t(1151);const s={},c=void 0,r={id:"tutorials/invoke-contract",title:"invoke-contract",description:"NOTE: THIS SECTION HAS NOT BEEN UPDATED FOR MAINNET VSC (PROCEED WITH CAUTION)",source:"@site/docs/tutorials/invoke-contract.md",sourceDirName:"tutorials",slug:"/tutorials/invoke-contract",permalink:"/docs/tutorials/invoke-contract",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"first-contract",permalink:"/docs/tutorials/first-contract"}},a={},d=[{value:"NOTE: THIS SECTION HAS NOT BEEN UPDATED FOR MAINNET VSC (PROCEED WITH CAUTION)",id:"note-this-section-has-not-been-updated-for-mainnet-vsc-proceed-with-caution",level:2},{value:"Environment setup",id:"environment-setup",level:2},{value:"VSC client based - setup",id:"vsc-client-based---setup",level:3},{value:"HIVE based - setup",id:"hive-based---setup",level:3},{value:"The payload",id:"the-payload",level:2},{value:"The code",id:"the-code",level:2},{value:"VSC client based - code",id:"vsc-client-based---code",level:3},{value:"HIVE based - code",id:"hive-based---code",level:2},{value:"Execution",id:"execution",level:2}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"note-this-section-has-not-been-updated-for-mainnet-vsc-proceed-with-caution",children:"NOTE: THIS SECTION HAS NOT BEEN UPDATED FOR MAINNET VSC (PROCEED WITH CAUTION)"}),"\n",(0,i.jsx)(n.h1,{id:"invoke-contract",children:"Invoke contract"}),"\n",(0,i.jsx)(n.p,{children:"This guide explains how to invoke a contract on the VSC network via javascript code."}),"\n",(0,i.jsxs)(n.p,{children:["There are currently 2 options to do so. Either by using the ",(0,i.jsx)(n.em,{children:"VSC client"})," or by sending HIVE layer 1 transactions via e.g. the ",(0,i.jsx)(n.em,{children:"@hiveio/dhive"})," library."]}),"\n",(0,i.jsx)(n.h2,{id:"environment-setup",children:"Environment setup"}),"\n",(0,i.jsx)(n.p,{children:"We will use a simple NodeJS setup for our contract invocation code. To start we initialize an empty project:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"npm init -y"})}),"\n",(0,i.jsx)(n.p,{children:"Now we will create a file we can put our code in. In this tutorail we will create it in the root of the project."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"/index.js"})}),"\n",(0,i.jsx)(n.p,{children:"For the next step, we edit the package.json file and add a script to start our application."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'"start": "node --experimental-specifier-resolution=node index.js"'})}),"\n",(0,i.jsx)(n.p,{children:'Since we will be using ES modules (import statements), we also need to add the "type": "module" field to our package.json file.'}),"\n",(0,i.jsx)(n.p,{children:"The package.json then may look something like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "name": "invoke-contract-test",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1",\n    "start": "node --experimental-specifier-resolution=node index.js"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "dependencies": {},\n  "type": "module"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Afterwards, we will install the minimally required packages."}),"\n",(0,i.jsx)(n.h3,{id:"vsc-client-based---setup",children:"VSC client based - setup"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"npm install @vsc.eco/client dids key-did-provider-ed25519 key-did-resolver"})}),"\n",(0,i.jsx)(n.h3,{id:"hive-based---setup",children:"HIVE based - setup"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"npm install @hiveio/dhive"})}),"\n",(0,i.jsx)(n.h2,{id:"the-payload",children:"The payload"}),"\n",(0,i.jsx)(n.p,{children:"A VSC transaction usually contains a payload. The payload may be any arbitrary data the contract endpoint accepts."}),"\n",(0,i.jsx)(n.p,{children:"In our example, we will use a simple JSON with some mock data."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:"{\n    hello: 'World'\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The payload is the most interesting part for developers who build on top of VSC, your contract logic determines what a contract may require as input information."}),"\n",(0,i.jsx)(n.h2,{id:"the-code",children:"The code"}),"\n",(0,i.jsxs)(n.p,{children:["We will now populate the ",(0,i.jsx)(n.code,{children:"index.js"})," file with code in order to finally send the transaction."]}),"\n",(0,i.jsx)(n.p,{children:"Depending on the chosen method there are slight differences in the configuration. Regardless, there are a lot of common options like the transaction datastructure that are explained below."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"op"}),": the type of transaction that is sent (contract invocation = 'call_contract')\n",(0,i.jsx)(n.strong,{children:"action"}),": the entrypoint (method name) of the contract that is called\n",(0,i.jsx)(n.strong,{children:"contract_id"}),": the id of the contract that we want to invoke\n",(0,i.jsx)(n.strong,{children:"payload"}),": the data that is provided to the execution context of the contract invocation"]}),"\n",(0,i.jsx)(n.h3,{id:"vsc-client-based---code",children:"VSC client based - code"}),"\n",(0,i.jsx)(n.p,{children:"The VSC client setup uses the DID authentification method in this example. For this, we need to provide the private key of our public/ private key pair."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { vClient, vTransaction, hexToUint8Array } from '@vsc.eco/client'\nimport { DID } from 'dids'\nimport { Ed25519Provider } from 'key-did-provider-ed25519'\nimport KeyResolver from 'key-did-resolver'\n\nvoid (async () => {\n    const privateKey = 'my-private-key'\n\n    const client = new vClient({\n        api: 'https://api.vsc.eco:443',\n        loginType: 'offchain'\n    })\n    const secret = hexToUint8Array(privateKey)\n    const keyPrivate = new Ed25519Provider(secret)\n    const did = new DID({ provider: keyPrivate, resolver: KeyResolver.getResolver() })\n    await did.authenticate()\n    \n    await client.login(did)\n    const tx = new vTransaction()\n    tx.setTx({\n        op: 'call_contract',\n        action: 'testJSON',\n        contract_id: 'vs41q9c3ygq38nldzh209g5aw0knllm45px5ycrwx5sv0jxddmd9ve4r0z6frcvv9h2j',\n        payload: {\n            hello: 'World'\n        }\n    })\n    await tx.broadcast(client);\n})()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"hive-based---code",children:"HIVE based - code"}),"\n",(0,i.jsx)(n.p,{children:"For the HIVE based setup we supply our HIVE account name and our HIVE account posting private key."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { Client, PrivateKey } from '@hiveio/dhive'\n\nvoid (async () => {\n    const hiveAccount = 'my-hive-account-name'\n    const hiveAccountPosting = 'my-hive-posting-key'\n\n    const broadcast = await Client.broadcast.json({\n\n    required_auths: [],\n    required_posting_auths: [hiveAccount],\n    id: \"vsc.tx\",\n    json: JSON.stringify({\n        net_id: \"testnet/0bf2e474-6b9e-4165-ad4e-a0d78968d20c\",\n        __v: '0.1',\n        __t: 'native',\n        tx: {\n            op: 'call_contract',\n            action: 'testJSON',\n            contract_id: 'vs41q9c3ygq38nldzh209g5aw0knllm45px5ycrwx5sv0jxddmd9ve4r0z6frcvv9h2j',\n            payload: {\n                hello: 'World'\n            }\n        }\n    })\n    }, PrivateKey.fromString(hiveAccountPosting))\n})()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"execution",children:"Execution"}),"\n",(0,i.jsx)(n.p,{children:"We can now run our example via:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"npm run start"})}),"\n",(0,i.jsx)(n.p,{children:"and should see the newly generated transaction ID in the console."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"{\n  data: {\n    submitTransactionV1: {\n      id: 'bafyreienfcot24lizhpml45ileeoy5lsobdtjlb4n7dh3k7z7zlpqpyi6u'\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you get this response your contract invocation was successfully published to the VSC network!"})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>c});var i=t(7294);const o={},s=i.createContext(o);function c(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);